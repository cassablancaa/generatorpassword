Analiza Wymagań



1. Funkcjonalności
Projekt Generator Losowych Haseł ma następujące główne funkcjonalności:

Generowanie haseł:

Użytkownik może określić długość hasła (od 8 do 26 znaków).

Użytkownik może wybrać rodzaje znaków:

Małe litery (a-z).

Duże litery (A-Z).

Cyfry (0-9).

Znaki specjalne (np. !@#$%^&*).

Zarządzanie hasłami:

Hasła są generowane losowo na podstawie wybranych parametrów.

Hasła są walidowane pod kątem minimalnej długości (8 znaków).

Wygenerowane hasła mogą zostać zapisane do pliku passwords.txt.

Statystyki:

Program zlicza liczbę wygenerowanych haseł.

Logowanie działań:

Każde wygenerowane hasło jest logowane w konsoli.

2. Struktura Danych
Projekt wykorzystuje następujące struktury danych Pythona:

Listy:

Przechowywanie dostępnych znaków (małe litery, duże litery, cyfry, znaki specjalne).

Przykład:


characters = []
if self.use_lowercase:
    characters.extend(string.ascii_lowercase)
Krotki (tuple):

Przechowywanie stałych wartości, np. dostępnych rodzajów znaków.

Przykład:


character_types = ("lowercase", "uppercase", "digits", "special_chars")
Słowniki:

Przechowywanie ustawień użytkownika (długość hasła, rodzaje znaków).

Przykład:


user_settings = {
    "length": 12,
    "use_lowercase": True,
    "use_uppercase": True,
    "use_digits": True,
    "use_special_chars": True,
}
3. Interakcje między komponentami
Projekt składa się z następujących głównych komponentów:

Klasa PasswordGenerator:

Generuje hasła na podstawie preferencji użytkownika.

Zarządza długością hasła i rodzajami znaków.

Wykorzystuje deskryptor PasswordDescriptor do walidacji haseł.

Deskryptor PasswordDescriptor:

Sprawdza, czy hasło spełnia minimalne wymagania (co najmniej 8 znaków).

class PasswordDescriptor:
    def __set__(self, instance, value):
        if not isinstance(value, str) or len(value) < 8:
            raise ValueError("Hasło musi mieć co najmniej 8 znaków.")
        instance._password = value
Metaklasa PasswordMeta:

Dodaje licznik wygenerowanych haseł do klasy PasswordGenerator.



class PasswordMeta(type):
    def __new__(cls, name, bases, dct):
        dct['generated_count'] = 0
        return super().__new__(cls, name, bases, dct)
Dekorator log_generation:

Loguje wygenerowane hasło w konsoli.



def log_generation(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        print(f"Wygenerowano hasło: {result}")
        return result
    return wrapper

4. Wykorzystane koncepcje Pythona
Projekt wykorzystuje następujące zaawansowane koncepcje Pythona:


Klasa PasswordGenerator jest główną klasą programu, odpowiedzialną za generowanie haseł.


Metaklasa PasswordMeta dodaje licznik wygenerowanych haseł do klasy PasswordGenerator.

Wyszukiwanie atrybutów w obiektach i klasach:

Mechanizm wyszukiwania atrybutów jest wykorzystywany w deskryptorze PasswordDescriptor oraz w metaklasie PasswordMeta.


Deskryptor PasswordDescriptor zarządza hasłem i sprawdza, czy spełnia minimalne wymagania.


Dekorator log_generation loguje wygenerowane hasło w konsoli.

5. Środowiska programistyczne
Projekt można rozwijać w dowolnym środowisku programistycznym wspierającym Pythona, np.:

Visual Studio Code (VS Code):

Popularne środowisko z wbudowaną obsługą Pythona.

Wsparcie dla debugowania, lintingu i testów.



Profesjonalne środowisko dla Pythona z zaawansowanymi funkcjami, takimi jak refaktoryzacja i integracja z narzędziami do testowania.

Jupyter Notebook:

Przydatne do szybkiego prototypowania i testowania fragmentów kodu.